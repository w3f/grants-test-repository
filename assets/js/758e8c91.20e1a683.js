"use strict";(self.webpackChunkgrants=self.webpackChunkgrants||[]).push([[9142],{28945:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>o});var n=a(87462),i=(a(67294),a(3905));a(16758);const r={},s="PHP Substrate API",p={unversionedId:"rfps/Implemented/php-api",id:"rfps/Implemented/php-api",title:"PHP Substrate API",description:"Proposer:* swader",source:"@site/docs/rfps/Implemented/php-api.md",sourceDirName:"rfps/Implemented",slug:"/rfps/Implemented/php-api",permalink:"/grants/rfps/Implemented/php-api",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"On-chain Quadratic Funding",permalink:"/grants/rfps/Implemented/on-chain-quadratic-funding"},next:{title:"PHP Version of SCALE Codec",permalink:"/grants/rfps/Implemented/php-scale"}},l={},o=[{value:"Project Description \ud83d\udcc4",id:"project-description-",level:2},{value:"Deliverables \ud83d\udd29",id:"deliverables-",level:2},{value:"Notes",id:"notes",level:2}],d={toc:o};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"php-substrate-api"},"PHP Substrate API"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Proposer:")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/api"},"swader")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Status:")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/gmajor-encrypt/php-substrate-api"},"Implemented"))),(0,i.kt)("h2",{id:"project-description-"},"Project Description \ud83d\udcc4"),(0,i.kt)("p",null,"The Substrate API is currently most developed in TypeScript and Rust. This RFP is looking for teams willing to implement a PHP version, perhaps in tandem with the PHP SCALE Coded (see relevant RFP)."),(0,i.kt)("p",null,"The PHP API should:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"be able to hook into a running Substrate node via WS or HTTP"),(0,i.kt)("li",{parentName:"ul"},"read and write to RPC endpoints (will need SCALE codec - see relevant related RFP)")),(0,i.kt)("p",null,"Optionally, the API should support types as exposed by the API. Supporting types is a long term project as those evolve constantly and differ from chain to chain, so if this road is taken by the applying team, it should be stated in a separate milestone and well defined in added maintenance time and cost (i.e. this is not something that can be delivered once - it would require a long term commitment)."),(0,i.kt)("h2",{id:"deliverables-"},"Deliverables \ud83d\udd29"),(0,i.kt)("p",null,"The basic deliverable of this project is an API package hosted on Packagist which can instantiate a connection to a Substrate node and talk to constants, chain storage, and RPC endpoints. For inspiration, see the JS version: ",(0,i.kt)("a",{parentName:"p",href:"https://polkadot.js.org/docs"},"https://polkadot.js.org/docs")),(0,i.kt)("p",null,"Example use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"reading from RPC")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'$api = new SubstrateApi\\Api("websocket_or_http_url");\necho $api->rpc->system->chain(); // Kusama\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"writing a tx:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'$api = new SubstrateApi\\Api("websocket_or_http_url");\n$signer = new SubstrateApi\\Keyring\\Signer("privatekey");\n$api->setSigner($signer);\n$tx = $api->tx->balances->transfer("recipient_address", 10000);\n$tx->signAndSend();\n')),(0,i.kt)("h2",{id:"notes"},"Notes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"look into ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/paritytech/scale-info"},"https://github.com/paritytech/scale-info"))))}u.isMDXComponent=!0}}]);